# NOTE: Generated By HttpRunner v3.1.4
# FROM: testcases/cases_1.yml


from httprunner import HttpRunner, Config, Step, RunRequest, RunTestCase


class TestCaseCases1(HttpRunner):

    config = Config("Entry Task 'HTTP module API' test cases").base_url(
        "http://127.0.0.1:5000"
    )

    teststeps = [
        Step(
            RunRequest("Positive Scenario：a=int, b=string")
            .get("/shopee/test")
            .with_params(**{"a": 1, "b": "nihao"})
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json")
            .assert_equal("body.error_code", 0)
            .assert_equal("body.error_message", "success")
            .assert_equal("body.reference", "success")
        ),
        Step(
            RunRequest("Positive case：a=random positive int, b=string")
            .get("/shopee/test")
            .with_params(
                **{"a": "${get_random_positive()}", "b": "${get_random_str()}"}
            )
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json")
            .assert_equal("body.error_code", 0)
            .assert_equal("body.error_message", "success")
            .assert_equal("body.reference", "success")
        ),
        Step(
            RunRequest("Positive case：a=random negative int, b=string")
            .get("/shopee/test")
            .with_params(
                **{"a": "${get_random_negative()}", "b": "${get_random_str()}"}
            )
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json")
            .assert_equal("body.error_code", 0)
            .assert_equal("body.error_message", "success")
            .assert_equal("body.reference", "success")
        ),
        Step(
            RunRequest("Negative case：missing parameter 'a'")
            .get("/shopee/test")
            .with_params(**{"b": "nihao"})
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json")
            .assert_equal("body.error_code", 21)
            .assert_equal("body.error_message", "empty or wrong params")
            .assert_equal("body.reference", "Parameters Missing a")
        ),
        Step(
            RunRequest("Negative case：parameter 'a' is ''")
            .get("/shopee/test")
            .with_params(**{"a": "", "b": "nihao"})
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json")
            .assert_equal("body.error_code", 21)
            .assert_equal("body.error_message", "empty or wrong params")
            .assert_equal(
                "body.reference",
                "Parameter Illegal Parameter 'a' needs to be int typeParameter 'a' should not be empty",
            )
        ),
        Step(
            RunRequest("Negative case：parameter 'a' is None")
            .get("/shopee/test")
            .with_params(**{"a": "None", "b": "nihao"})
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json")
            .assert_equal("body.error_code", 21)
            .assert_equal("body.error_message", "empty or wrong params")
            .assert_equal(
                "body.reference", "Parameter Illegal Parameter 'a' needs to be int type"
            )
        ),
        Step(
            RunRequest("Negative case：parameter 'a' is non-int type")
            .get("/shopee/test")
            .with_params(**{"a": 2.34, "b": "nihao"})
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json")
            .assert_equal("body.error_code", 21)
            .assert_equal("body.error_message", "empty or wrong params")
            .assert_equal(
                "body.reference", "Parameter Illegal Parameter 'a' needs to be int type"
            )
        ),
        Step(
            RunRequest("Negative case：parameter 'a' is a String")
            .get("/shopee/test")
            .with_params(**{"a": "hi", "b": "nihao"})
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json")
            .assert_equal("body.error_code", 21)
            .assert_equal("body.error_message", "empty or wrong params")
            .assert_equal(
                "body.reference", "Parameter Illegal Parameter 'a' needs to be int type"
            )
        ),
        Step(
            RunRequest("Negative case：parameter 'a' is special characters")
            .get("/shopee/test")
            .with_params(**{"a": "&^*", "b": "nihao"})
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json")
            .assert_equal("body.error_code", 21)
            .assert_equal("body.error_message", "empty or wrong params")
            .assert_equal(
                "body.reference", "Parameter Illegal Parameter 'a' needs to be int type"
            )
        ),
        Step(
            RunRequest("Negative case：parameter 'a' is '中文'")
            .get("/shopee/test")
            .with_params(**{"a": "中文", "b": "nihao"})
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json")
            .assert_equal("body.error_code", 21)
            .assert_equal("body.error_message", "empty or wrong params")
            .assert_equal(
                "body.reference", "Parameter Illegal Parameter 'a' needs to be int type"
            )
        ),
        Step(
            RunRequest("Positive case：parameter 'a' is minimum Int")
            .get("/shopee/test")
            .with_params(**{"a": -9223372036854775808, "b": "nihao"})
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json")
            .assert_equal("body.error_code", 0)
            .assert_equal("body.error_message", "success")
            .assert_equal("body.reference", "success")
        ),
        Step(
            RunRequest("Positive case：parameter 'a' is maximum Int")
            .get("/shopee/test")
            .with_params(**{"a": 9223372036854775807, "b": "nihao"})
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json")
            .assert_equal("body.error_code", 0)
            .assert_equal("body.error_message", "success")
            .assert_equal("body.reference", "success")
        ),
    ]


if __name__ == "__main__":
    TestCaseCases1().test_start()

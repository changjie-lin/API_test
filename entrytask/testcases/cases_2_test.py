# NOTE: Generated By HttpRunner v3.1.4
# FROM: testcases/cases_2.yml


from httprunner import HttpRunner, Config, Step, RunRequest, RunTestCase


class TestCaseCases2(HttpRunner):

    config = Config("Entry Task 'HTTP module API' test cases").base_url(
        "http://127.0.0.1:5000"
    )

    teststeps = [
        Step(
            RunRequest("Negative case：parameter 'b' is missing")
            .get("/shopee/test")
            .with_params(**{"a": 1})
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json")
            .assert_equal("body.error_code", 21)
            .assert_equal("body.error_message", "empty or wrong params")
            .assert_equal("body.reference", "Parameters Missing b")
        ),
        Step(
            RunRequest("Negative case：parameter 'b' is ''")
            .get("/shopee/test")
            .with_params(**{"a": 1, "b": ""})
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json")
            .assert_equal("body.error_code", 21)
            .assert_equal("body.error_message", "empty or wrong params")
            .assert_equal(
                "body.reference", "Parameter Illegal Parameter 'b' should not be empty"
            )
        ),
        Step(
            RunRequest("Positive case：parameter 'b' is None")
            .get("/shopee/test")
            .with_params(**{"a": 1, "b": "None"})
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json")
            .assert_equal("body.error_code", 0)
            .assert_equal("body.error_message", "success")
            .assert_equal("body.reference", "success")
        ),
        Step(
            RunRequest("Positive case：parameter 'b' is a number")
            .get("/shopee/test")
            .with_params(**{"a": 1, "b": 5})
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json")
            .assert_equal("body.error_code", 0)
            .assert_equal("body.error_message", "success")
            .assert_equal("body.reference", "success")
        ),
        Step(
            RunRequest("Positive case：parameter 'b' is '中文'")
            .get("/shopee/test")
            .with_params(**{"a": 1, "b": "中文"})
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json")
            .assert_equal("body.error_code", 0)
            .assert_equal("body.error_message", "success")
            .assert_equal("body.reference", "success")
        ),
        Step(
            RunRequest("Positive case：parameter 'b' is special characters")
            .get("/shopee/test")
            .with_params(**{"a": 1, "b": "^&*?"})
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json")
            .assert_equal("body.error_code", 0)
            .assert_equal("body.error_message", "success")
            .assert_equal("body.reference", "success")
        ),
        Step(
            RunRequest("Positive case：parameter 'b' is a long string")
            .get("/shopee/test")
            .with_params(**{"a": 1, "b": "${get_long_str()}"})
            .validate()
            .assert_equal("status_code", 200)
            .assert_equal('headers."Content-Type"', "application/json")
            .assert_equal("body.error_code", 0)
            .assert_equal("body.error_message", "success")
            .assert_equal("body.reference", "success")
        ),
    ]


if __name__ == "__main__":
    TestCaseCases2().test_start()
